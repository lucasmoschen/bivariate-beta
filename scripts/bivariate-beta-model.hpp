
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace bivariate_beta_model_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 31> locations_array__ = 
{" (found before start of program)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 31, column 3 to column 26)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 35, column 8 to column 37)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 34, column 17 to line 36, column 5)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 34, column 4 to line 36, column 5)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 38, column 8 to column 72)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 37, column 17 to line 39, column 5)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 37, column 4 to line 39, column 5)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 15, column 3 to column 18)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 16, column 29 to column 30)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 16, column 3 to column 34)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 17, column 3 to column 22)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 18, column 3 to column 22)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 19, column 3 to column 27)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 22, column 11 to column 12)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 22, column 3 to column 14)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 23, column 11 to column 12)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 23, column 3 to column 14)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 25, column 6 to column 49)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 26, column 6 to column 30)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 24, column 18 to line 27, column 4)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 24, column 3 to line 27, column 4)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 28, column 3 to column 14)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 3, column 7 to column 109)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 2, column 36 to line 4, column 4)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 6, column 7 to column 23)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 7, column 7 to column 23)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 8, column 7 to column 96)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 5, column 71 to line 9, column 4)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 11, column 7 to column 102)",
 " (in '/home/lucasmoschen/Documents/GitHub/bivariate-beta/scripts/bivariate-beta-model.stan', line 10, column 111 to line 12, column 4)"};

struct log_bivariate_beta_lpdf_functor__ {
  template <bool propto__, typename T1__, typename T2__, typename T3__,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr>
  stan::promote_args_t<T1__, T2__, T3__>
  operator()(const std::vector<double>& xy, const std::vector<T1__>& alpha,
             const T2__& lb, const T3__& ub, const std::vector<int>& x_i,
             const double& tolerance, std::ostream* pstream__) const;
};
struct integrand_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& x, const T1__& xc, const std::vector<T2__>& theta,
             const std::vector<T3__>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct log_multi_beta_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const std::vector<T0__>& theta, std::ostream* pstream__) const;
};

template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  stan::promote_args_t<T0__>
  log_multi_beta(const std::vector<T0__>& theta, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 23;
      return ((((stan::math::lgamma(
                   stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(1))) +
                  stan::math::lgamma(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(2)))) +
                 stan::math::lgamma(
                   stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(3)))) +
                stan::math::lgamma(
                  stan::model::rvalue(theta, "theta",
                    stan::model::index_uni(4)))) -
               stan::math::lgamma(stan::math::sum(theta)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  integrand(const T0__& x, const T1__& xc, const std::vector<T2__>& theta,
            const std::vector<T3__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ s = DUMMY_VAR__;
      current_statement__ = 25;
      s = stan::model::rvalue(x_r, "x_r", stan::model::index_uni(1));
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 26;
      t = stan::model::rvalue(x_r, "x_r", stan::model::index_uni(2));
      current_statement__ = 27;
      return (((stan::math::pow(x,
                  (stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(1)) - 1)) *
                 stan::math::pow((s - x),
                   (stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(2)) - 1))) *
                stan::math::pow((t - x),
                  (stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(3)) - 1))) *
               stan::math::pow((((1 - s) - t) + x),
                 (stan::model::rvalue(theta, "theta",
                    stan::model::index_uni(4)) - 1)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T1__, typename T2__, typename T3__,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr>
  stan::promote_args_t<T1__, T2__, T3__>
  log_bivariate_beta_lpdf(const std::vector<double>& xy,
                          const std::vector<T1__>& alpha, const T2__& lb,
                          const T3__& ub, const std::vector<int>& x_i,
                          const double& tolerance, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__>;
    int current_statement__ = 0; 
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 29;
      return (stan::math::log(
                stan::math::integrate_1d(integrand_functor__(), lb, ub,
                  alpha, xy, x_i, pstream__, tolerance)) -
               log_multi_beta(alpha, pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T1__, typename T2__, typename T3__,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*>
stan::promote_args_t<T1__, T2__, T3__>
log_bivariate_beta_lpdf_functor__::operator()(const std::vector<double>& xy,
                                              const std::vector<T1__>& alpha,
                                              const T2__& lb, const T3__& ub,
                                              const std::vector<int>& x_i,
                                              const double& tolerance,
                                              std::ostream* pstream__)  const
{
  return log_bivariate_beta_lpdf<propto__>(xy, alpha, lb, ub, x_i, tolerance,
           pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
integrand_functor__::operator()(const T0__& x, const T1__& xc,
                                const std::vector<T2__>& theta,
                                const std::vector<T3__>& x_r,
                                const std::vector<int>& x_i,
                                std::ostream* pstream__)  const
{
  return integrand(x, xc, theta, x_r, x_i, pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
stan::promote_args_t<T0__>
log_multi_beta_functor__::operator()(const std::vector<T0__>& theta,
                                     std::ostream* pstream__)  const
{
  return log_multi_beta(theta, pstream__);
}


class bivariate_beta_model_model final : public model_base_crtp<bivariate_beta_model_model> {

 private:
  int n;
  std::vector<std::vector<double>> xy;
  std::vector<double> a;
  std::vector<double> b;
  double tolerance;
  std::vector<double> lb;
  std::vector<double> ub;
  std::vector<int> x_i; 
  
 
 public:
  ~bivariate_beta_model_model() { }
  
  inline std::string model_name() const final { return "bivariate_beta_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  bivariate_beta_model_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "bivariate_beta_model_model_namespace::bivariate_beta_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 8;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      
      current_statement__ = 8;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 9;
      stan::math::validate_non_negative_index("xy", "n", n);
      current_statement__ = 10;
      context__.validate_dims("data initialization","xy","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(2)});
      xy = 
        std::vector<std::vector<double>>(n, 
          std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> xy_flat__;
        current_statement__ = 10;
        xy_flat__ = context__.vals_r("xy");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 10;
            stan::model::assign(xy, xy_flat__[(pos__ - 1)],
              "assigning variable xy", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 10;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "xy", xy, 0);
      current_statement__ = 10;
      stan::math::check_less_or_equal(function__, "xy", xy, 1);
      current_statement__ = 11;
      context__.validate_dims("data initialization","a","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      a = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 11;
      a = context__.vals_r("a");
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 12;
      context__.validate_dims("data initialization","b","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      b = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 12;
      b = context__.vals_r("b");
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 13;
      context__.validate_dims("data initialization","tolerance","double",
           std::vector<size_t>{});
      tolerance = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 13;
      tolerance = context__.vals_r("tolerance")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "tolerance", tolerance,
                                            0);
      current_statement__ = 14;
      stan::math::validate_non_negative_index("lb", "n", n);
      current_statement__ = 15;
      lb = std::vector<double>(n, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 16;
      stan::math::validate_non_negative_index("ub", "n", n);
      current_statement__ = 17;
      ub = std::vector<double>(n, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 21;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 18;
        stan::model::assign(lb,
          (stan::math::max(std::vector<double>{0.0,
             ((stan::model::rvalue(xy, "xy",
                 stan::model::index_uni(i), stan::model::index_uni(1)) +
                stan::model::rvalue(xy, "xy",
                  stan::model::index_uni(i), stan::model::index_uni(2))) - 1)})
            + 1e-8), "assigning variable lb", stan::model::index_uni(i));
        current_statement__ = 19;
        stan::model::assign(ub,
          (stan::math::min(
             stan::model::rvalue(xy, "xy", stan::model::index_uni(i))) -
            1e-8), "assigning variable ub", stan::model::index_uni(i));
      }
      current_statement__ = 22;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 4;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "bivariate_beta_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> alpha =
         std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<std::vector<local_scalar_t__>, 
                jacobian__>(0, lp__, 4);
      {
        current_statement__ = 4;
        for (int i = 1; i <= 4; ++i) {
          current_statement__ = 2;
          lp_accum__.add(
            stan::math::gamma_lpdf<propto__>(
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(i)),
              stan::model::rvalue(a, "a", stan::model::index_uni(i)),
              stan::model::rvalue(b, "b", stan::model::index_uni(i))));
        }
        current_statement__ = 7;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 5;
          lp_accum__.add(
            log_bivariate_beta_lpdf<propto__>(
              stan::model::rvalue(xy, "xy", stan::model::index_uni(i)),
              alpha,
              stan::model::rvalue(lb, "lb", stan::model::index_uni(i)),
              stan::model::rvalue(ub, "ub", stan::model::index_uni(i)), x_i,
              tolerance, pstream__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "bivariate_beta_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> alpha =
         std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<std::vector<local_scalar_t__>, 
                jacobian__>(0, lp__, 4);
      out__.write(alpha);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha =
         std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        alpha[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(4)
                                                                   }};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 4;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 4;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 1> names__{"alpha"};
      const std::array<Eigen::Index, 1> constrain_param_sizes__{4};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = bivariate_beta_model_model_namespace::bivariate_beta_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return bivariate_beta_model_model_namespace::profiles__;
}

#endif


